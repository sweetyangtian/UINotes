(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{41:function(t,s,a){t.exports=a.p+"assets/img/github.962e0377.png"},42:function(t,s,a){t.exports=a.p+"assets/img/git.6cbc7061.png"},67:function(t,s,a){"use strict";a.r(s);var e=[function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"菜鸟入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#菜鸟入门","aria-hidden":"true"}},[t._v("#")]),t._v(" 菜鸟入门")]),e("p",[e("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰的网站-详细Git教程")])]),e("p",[t._v("github客户端-方便代码提交和操作")]),e("p",[e("img",{attrs:{src:a(41),alt:"github"}})]),e("h2",{attrs:{id:"命令总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 命令总结")]),e("blockquote",[e("p",[t._v("新建仓库")])]),e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("$ git init "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把这个目录变成Git可以管理的仓库,当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的,如果这个目录默认是隐藏的，用ls -ah命令就可以看见")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("随便新建一个readme"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt文件\n$ git add readme"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加文件到库")]),t._v("\n$ git commit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wrote a readme file"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文件提交到仓库")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("master")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("commit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" eaadf4e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" wrote a readme file\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" file changed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" readme"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt\n\n$ git status命令可以让我们时刻掌握仓库当前的状态\n")])]),e("blockquote",[e("p",[t._v("修改文件")])]),e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("\n$ git diff  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看文件修改内容")]),t._v("\n$ git status "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//看看当前仓库的状态")]),t._v("\n$ git add\n$ git commit\n$ git log "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看历史记录 $ git log --pretty=oneline")]),t._v("\n")])]),e("blockquote",[e("p",[t._v("回退版本")])]),e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^,版本太多写成HEAD~100")]),t._v("\n$ git reset "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" \n或者\n$ git reset "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1094")]),t._v("a（版本号commit id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("前几位即可）\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后悔药：Git提供了一个命令git reflog用来记录你的每一次命令,即可查到commit id")]),t._v("\n$ git reflog\ne475afc "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("@"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" reset"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" moving to "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1094")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("adb")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("@"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" commit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" append "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GPL")]),t._v("\n\n")])]),e("blockquote",[e("p",[t._v("分支")])]),e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("\n$ git branch dev            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建dev分支-- git branch命令查看当前分支")]),t._v("\n$ git checkout dev          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 切换到dev分支 也可用合集 $ git checkout -b dev           ")]),t._v("\n$ git checkout master       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dev分支的工作完成，切换回master分支")]),t._v("\n$ git merge dev             "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把dev分支的工作成果合并到master分支上")]),t._v("\n$ git branch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除分支")]),t._v("\n")])]),e("p",[t._v('注意： 合并分支时，如果可能，Git会用Fast forward模式，删除分支后，会丢掉分支信息。所以要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。使用命令：\n$ git merge --no-ff -m "merge with no-ff" dev')]),e("blockquote",[e("p",[t._v("冲突")])]),e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("$ git merge feature1\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改冲突文件readme.txt,Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解决冲突后")]),t._v("\n$ git add readme"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt \n$ git commit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"conflict fixed"')]),t._v("\n")])]),e("blockquote",[e("p",[t._v("bug 分支")])]),e("p",[t._v("修复一个代号101的bug")]),e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("$ git stash                     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把当前工作现场“储藏”起来")]),t._v("\n\n$ git checkout master           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 切换到bug修复分支")]),t._v("\n$ git checkout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b issue"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建bug分支")]),t._v("\n\n$ git add readme"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提交")]),t._v("\n$ git commit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fix bug 101"')]),t._v("   \n\n$ git checkout master           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 切换到bug修复分支")]),t._v("\n$ git merge "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ff "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"merged bug fix 101"')]),t._v(" issue"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合并--bug修复完成")]),t._v("\n\n$ git checkout dev              "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//切回工作分支")]),t._v("\n$ git status\n$ git stash list                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看存储列表")]),t._v("\nstash@"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WIP")]),t._v(" on dev"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" f52c633 add merge\n\n$ git stash apply stash@"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 恢复")]),t._v("\n$ git stash drop  stash@"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除存储")]),t._v("\n\n$ git stash pop                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 恢复+删除")]),t._v("\n")])]),e("h2",{attrs:{id:"修改密码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改密码","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改密码")]),e("p",[t._v("修改git 已配置的用户密码")]),e("p",[t._v("控制面板---用户账户---凭据管理--修改相应的密码")]),e("p",[e("img",{attrs:{src:a(42),alt:"git"}})]),e("p",[t._v("运行一下命令缓存输入的用户名和密码：")]),e("pre",[e("code",[t._v("git config --global credential.helper wincred\n")])]),e("p",[t._v("清除掉缓存在git中的用户名和密码")]),e("pre",[e("code",[t._v("git credential-manager uninstall\n")])]),e("p",[t._v("恢复保存密码")]),e("pre",[e("code",[t._v("git config --global credential.helper store\n")])]),e("h2",{attrs:{id:"windows下ssl证书问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows下ssl证书问题","aria-hidden":"true"}},[t._v("#")]),t._v(" windows下SSL证书问题")]),e("p",[t._v("错误：\nSSL certificate problem: self signed certificate")]),e("p",[t._v("解决：\ngit config --global http.sslVerify false")])])}],n=a(0),r=Object(n.a)({},function(){var t=this.$createElement;this._self._c;return this._m(0)},e,!1,null,null,null);s.default=r.exports}}]);